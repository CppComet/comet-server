mime_types.insert(std::pair<const char*, const char*>("ai", "application/postscript"));
mime_types.insert(std::pair<const char*, const char*>("aif", "audio/aiff"));
mime_types.insert(std::pair<const char*, const char*>("aif", "audio/x-aiff"));
mime_types.insert(std::pair<const char*, const char*>("aiff", "audio/aiff"));
mime_types.insert(std::pair<const char*, const char*>("aiff", "audio/x-aiff"));
mime_types.insert(std::pair<const char*, const char*>("ani", "application/x-navi-animation"));
mime_types.insert(std::pair<const char*, const char*>("aos", "application/x-nokia-9000-communicator-add-on-software"));
mime_types.insert(std::pair<const char*, const char*>("aps", "application/mime"));
mime_types.insert(std::pair<const char*, const char*>("arc", "application/octet-stream"));
mime_types.insert(std::pair<const char*, const char*>("arj", "application/arj"));
mime_types.insert(std::pair<const char*, const char*>("arj", "application/octet-stream"));
mime_types.insert(std::pair<const char*, const char*>("art", "image/x-jg"));
mime_types.insert(std::pair<const char*, const char*>("asf", "video/x-ms-asf"));
mime_types.insert(std::pair<const char*, const char*>("asm", "text/x-asm"));
mime_types.insert(std::pair<const char*, const char*>("asp", "text/asp"));
mime_types.insert(std::pair<const char*, const char*>("asx", "application/x-mplayer2"));
mime_types.insert(std::pair<const char*, const char*>("asx", "video/x-ms-asf"));
mime_types.insert(std::pair<const char*, const char*>("asx", "video/x-ms-asf-plugin"));
mime_types.insert(std::pair<const char*, const char*>("au", "audio/basic"));
mime_types.insert(std::pair<const char*, const char*>("au", "audio/x-au"));
mime_types.insert(std::pair<const char*, const char*>("avi", "application/x-troff-msvideo"));
mime_types.insert(std::pair<const char*, const char*>("avi", "video/avi"));
mime_types.insert(std::pair<const char*, const char*>("avi", "video/msvideo"));
mime_types.insert(std::pair<const char*, const char*>("avi", "video/x-msvideo"));
mime_types.insert(std::pair<const char*, const char*>("bin", "application/mac-binary"));
mime_types.insert(std::pair<const char*, const char*>("bin", "application/macbinary"));
mime_types.insert(std::pair<const char*, const char*>("bin", "application/octet-stream"));
mime_types.insert(std::pair<const char*, const char*>("bin", "application/x-binary"));
mime_types.insert(std::pair<const char*, const char*>("bin", "application/x-macbinary"));
mime_types.insert(std::pair<const char*, const char*>("bm", "image/bmp"));
mime_types.insert(std::pair<const char*, const char*>("bmp", "image/bmp"));
mime_types.insert(std::pair<const char*, const char*>("bmp", "image/x-windows-bmp"));
mime_types.insert(std::pair<const char*, const char*>("boo", "application/book"));
mime_types.insert(std::pair<const char*, const char*>("book", "application/book"));
mime_types.insert(std::pair<const char*, const char*>("c", "text/x-c"));
mime_types.insert(std::pair<const char*, const char*>("c++", "text/plain"));
mime_types.insert(std::pair<const char*, const char*>("ccad", "application/clariscad"));
mime_types.insert(std::pair<const char*, const char*>("class", "application/java"));
mime_types.insert(std::pair<const char*, const char*>("class", "application/java-byte-code"));
mime_types.insert(std::pair<const char*, const char*>("class", "application/x-java-class"));
mime_types.insert(std::pair<const char*, const char*>("com", "application/octet-stream"));
mime_types.insert(std::pair<const char*, const char*>("com", "text/plain"));
mime_types.insert(std::pair<const char*, const char*>("conf", "text/plain"));
mime_types.insert(std::pair<const char*, const char*>("cpp", "text/x-c"));
mime_types.insert(std::pair<const char*, const char*>("cpt", "application/mac-compactpro"));
mime_types.insert(std::pair<const char*, const char*>("cpt", "application/x-compactpro"));
mime_types.insert(std::pair<const char*, const char*>("cpt", "application/x-cpt"));
mime_types.insert(std::pair<const char*, const char*>("css", "application/x-pointplus"));
mime_types.insert(std::pair<const char*, const char*>("css", "text/css"));
mime_types.insert(std::pair<const char*, const char*>("dcr", "application/x-director"));
mime_types.insert(std::pair<const char*, const char*>("def", "text/plain"));
mime_types.insert(std::pair<const char*, const char*>("dif", "video/x-dv"));
mime_types.insert(std::pair<const char*, const char*>("dir", "application/x-director"));
mime_types.insert(std::pair<const char*, const char*>("dl", "video/dl"));
mime_types.insert(std::pair<const char*, const char*>("dl", "video/x-dl"));
mime_types.insert(std::pair<const char*, const char*>("doc", "application/msword"));
mime_types.insert(std::pair<const char*, const char*>("dot", "application/msword"));
mime_types.insert(std::pair<const char*, const char*>("drw", "application/drafting"));
mime_types.insert(std::pair<const char*, const char*>("dvi", "application/x-dvi"));
mime_types.insert(std::pair<const char*, const char*>("dwg", "application/acad"));
mime_types.insert(std::pair<const char*, const char*>("dwg", "image/vnd.dwg"));
mime_types.insert(std::pair<const char*, const char*>("dwg", "image/x-dwg"));
mime_types.insert(std::pair<const char*, const char*>("dxf", "application/dxf"));
mime_types.insert(std::pair<const char*, const char*>("dxf", "image/vnd.dwg"));
mime_types.insert(std::pair<const char*, const char*>("dxf", "image/x-dwg"));
mime_types.insert(std::pair<const char*, const char*>("dxr", "application/x-director"));
mime_types.insert(std::pair<const char*, const char*>("exe", "application/octet-stream"));
mime_types.insert(std::pair<const char*, const char*>("gif", "image/gif"));
mime_types.insert(std::pair<const char*, const char*>("gz", "application/x-compressed"));
mime_types.insert(std::pair<const char*, const char*>("gz", "application/x-gzip"));
mime_types.insert(std::pair<const char*, const char*>("gzip", "application/x-gzip"));
mime_types.insert(std::pair<const char*, const char*>("gzip", "multipart/x-gzip"));
mime_types.insert(std::pair<const char*, const char*>("h", "text/plain"));
mime_types.insert(std::pair<const char*, const char*>("h", "text/x-h"));
mime_types.insert(std::pair<const char*, const char*>("hlp", "application/hlp"));
mime_types.insert(std::pair<const char*, const char*>("hlp", "application/x-helpfile"));
mime_types.insert(std::pair<const char*, const char*>("hlp", "application/x-winhelp"));
mime_types.insert(std::pair<const char*, const char*>("htc", "text/x-component"));
mime_types.insert(std::pair<const char*, const char*>("htm", "text/html"));
mime_types.insert(std::pair<const char*, const char*>("html", "text/html"));
mime_types.insert(std::pair<const char*, const char*>("htmls", "text/html"));
mime_types.insert(std::pair<const char*, const char*>("htt", "text/webviewhtml"));
mime_types.insert(std::pair<const char*, const char*>("ice", "x-conference/x-cooltalk"));
mime_types.insert(std::pair<const char*, const char*>("ico", "image/x-icon"));
mime_types.insert(std::pair<const char*, const char*>("inf", "application/inf"));
mime_types.insert(std::pair<const char*, const char*>("jam", "audio/x-jam"));
mime_types.insert(std::pair<const char*, const char*>("jav", "text/plain"));
mime_types.insert(std::pair<const char*, const char*>("jav", "text/x-java-source"));
mime_types.insert(std::pair<const char*, const char*>("java", "text/plain"));
mime_types.insert(std::pair<const char*, const char*>("java", "text/x-java-source"));
mime_types.insert(std::pair<const char*, const char*>("jcm", "application/x-java-commerce"));
mime_types.insert(std::pair<const char*, const char*>("jfif", "image/jpeg"));
mime_types.insert(std::pair<const char*, const char*>("jfif", "image/pjpeg"));
mime_types.insert(std::pair<const char*, const char*>("jfif-tbnl", "image/jpeg"));
mime_types.insert(std::pair<const char*, const char*>("jpe", "image/jpeg"));
mime_types.insert(std::pair<const char*, const char*>("jpe", "image/pjpeg"));
mime_types.insert(std::pair<const char*, const char*>("jpeg", "image/jpeg"));
mime_types.insert(std::pair<const char*, const char*>("jpeg", "image/pjpeg"));
mime_types.insert(std::pair<const char*, const char*>("jpg", "image/jpeg"));
mime_types.insert(std::pair<const char*, const char*>("jpg", "image/pjpeg"));
mime_types.insert(std::pair<const char*, const char*>("jps", "image/x-jps"));
mime_types.insert(std::pair<const char*, const char*>("js", "application/x-javascript"));
mime_types.insert(std::pair<const char*, const char*>("js", "application/javascript"));
mime_types.insert(std::pair<const char*, const char*>("js", "application/ecmascript"));
mime_types.insert(std::pair<const char*, const char*>("js", "text/javascript"));
mime_types.insert(std::pair<const char*, const char*>("js", "text/ecmascript"));
mime_types.insert(std::pair<const char*, const char*>("latex", "application/x-latex"));
mime_types.insert(std::pair<const char*, const char*>("lha", "application/lha"));
mime_types.insert(std::pair<const char*, const char*>("lha", "application/octet-stream"));
mime_types.insert(std::pair<const char*, const char*>("lha", "application/x-lha"));
mime_types.insert(std::pair<const char*, const char*>("lhx", "application/octet-stream"));
mime_types.insert(std::pair<const char*, const char*>("list", "text/plain"));
mime_types.insert(std::pair<const char*, const char*>("lsp", "application/x-lisp"));
mime_types.insert(std::pair<const char*, const char*>("lsp", "text/x-script.lisp"));
mime_types.insert(std::pair<const char*, const char*>("lst", "text/plain"));
mime_types.insert(std::pair<const char*, const char*>("lzh", "application/octet-stream"));
mime_types.insert(std::pair<const char*, const char*>("lzh", "application/x-lzh"));
mime_types.insert(std::pair<const char*, const char*>("lzx", "application/lzx"));
mime_types.insert(std::pair<const char*, const char*>("lzx", "application/octet-stream"));
mime_types.insert(std::pair<const char*, const char*>("lzx", "application/x-lzx"));
mime_types.insert(std::pair<const char*, const char*>("m3u", "audio/x-mpequrl"));
mime_types.insert(std::pair<const char*, const char*>("man", "application/x-troff-man"));
mime_types.insert(std::pair<const char*, const char*>("mid", "application/x-midi"));
mime_types.insert(std::pair<const char*, const char*>("mid", "audio/midi"));
mime_types.insert(std::pair<const char*, const char*>("mid", "audio/x-mid"));
mime_types.insert(std::pair<const char*, const char*>("mid", "audio/x-midi"));
mime_types.insert(std::pair<const char*, const char*>("mid", "music/crescendo"));
mime_types.insert(std::pair<const char*, const char*>("mid", "x-music/x-midi"));
mime_types.insert(std::pair<const char*, const char*>("midi", "application/x-midi"));
mime_types.insert(std::pair<const char*, const char*>("midi", "audio/midi"));
mime_types.insert(std::pair<const char*, const char*>("midi", "audio/x-mid"));
mime_types.insert(std::pair<const char*, const char*>("midi", "audio/x-midi"));
mime_types.insert(std::pair<const char*, const char*>("midi", "music/crescendo"));
mime_types.insert(std::pair<const char*, const char*>("midi", "x-music/x-midi"));
mime_types.insert(std::pair<const char*, const char*>("mod", "audio/mod"));
mime_types.insert(std::pair<const char*, const char*>("mod", "audio/x-mod"));
mime_types.insert(std::pair<const char*, const char*>("mov", "video/quicktime"));
mime_types.insert(std::pair<const char*, const char*>("movie", "video/x-sgi-movie"));
mime_types.insert(std::pair<const char*, const char*>("mp2", "audio/mpeg"));
mime_types.insert(std::pair<const char*, const char*>("mp2", "audio/x-mpeg"));
mime_types.insert(std::pair<const char*, const char*>("mp2", "video/mpeg"));
mime_types.insert(std::pair<const char*, const char*>("mp2", "video/x-mpeg"));
mime_types.insert(std::pair<const char*, const char*>("mp2", "video/x-mpeq2a"));
mime_types.insert(std::pair<const char*, const char*>("mp3", "audio/mpeg3"));
mime_types.insert(std::pair<const char*, const char*>("mp3", "audio/x-mpeg-3"));
mime_types.insert(std::pair<const char*, const char*>("mp3", "video/mpeg"));
mime_types.insert(std::pair<const char*, const char*>("mp3", "video/x-mpeg"));
mime_types.insert(std::pair<const char*, const char*>("mp4", "video/mp4"));
mime_types.insert(std::pair<const char*, const char*>("mpa", "audio/mpeg"));
mime_types.insert(std::pair<const char*, const char*>("mpa", "video/mpeg"));
mime_types.insert(std::pair<const char*, const char*>("mpeg", "video/mpeg"));
mime_types.insert(std::pair<const char*, const char*>("mpg", "audio/mpeg"));
mime_types.insert(std::pair<const char*, const char*>("mpg", "video/mpeg"));
mime_types.insert(std::pair<const char*, const char*>("mpga", "audio/mpeg"));
mime_types.insert(std::pair<const char*, const char*>("pas", "text/pascal"));
mime_types.insert(std::pair<const char*, const char*>("pcl", "application/vnd.hp-pcl"));
mime_types.insert(std::pair<const char*, const char*>("pcl", "application/x-pcl"));
mime_types.insert(std::pair<const char*, const char*>("pct", "image/x-pict"));
mime_types.insert(std::pair<const char*, const char*>("pcx", "image/x-pcx"));
mime_types.insert(std::pair<const char*, const char*>("pdf", "application/pdf"));
mime_types.insert(std::pair<const char*, const char*>("pic", "image/pict"));
mime_types.insert(std::pair<const char*, const char*>("pict", "image/pict"));
mime_types.insert(std::pair<const char*, const char*>("pl", "text/plain"));
mime_types.insert(std::pair<const char*, const char*>("pl", "text/x-script.perl"));
mime_types.insert(std::pair<const char*, const char*>("pm", "image/x-xpixmap"));
mime_types.insert(std::pair<const char*, const char*>("pm", "text/x-script.perl-module"));
mime_types.insert(std::pair<const char*, const char*>("pm4", "application/x-pagemaker"));
mime_types.insert(std::pair<const char*, const char*>("pm5", "application/x-pagemaker"));
mime_types.insert(std::pair<const char*, const char*>("png", "image/png"));
mime_types.insert(std::pair<const char*, const char*>("pot", "application/mspowerpoint"));
mime_types.insert(std::pair<const char*, const char*>("pot", "application/vnd.ms-powerpoint"));
mime_types.insert(std::pair<const char*, const char*>("ppa", "application/vnd.ms-powerpoint"));
mime_types.insert(std::pair<const char*, const char*>("pps", "application/mspowerpoint"));
mime_types.insert(std::pair<const char*, const char*>("pps", "application/vnd.ms-powerpoint"));
mime_types.insert(std::pair<const char*, const char*>("ppt", "application/mspowerpoint"));
mime_types.insert(std::pair<const char*, const char*>("ppt", "application/powerpoint"));
mime_types.insert(std::pair<const char*, const char*>("ppt", "application/vnd.ms-powerpoint"));
mime_types.insert(std::pair<const char*, const char*>("ppt", "application/x-mspowerpoint"));
mime_types.insert(std::pair<const char*, const char*>("ppz", "application/mspowerpoint"));
mime_types.insert(std::pair<const char*, const char*>("ps", "application/postscript"));
mime_types.insert(std::pair<const char*, const char*>("psd", "application/octet-stream"));
mime_types.insert(std::pair<const char*, const char*>("pwz", "application/vnd.ms-powerpoint"));
mime_types.insert(std::pair<const char*, const char*>("py", "text/x-script.phyton"));
mime_types.insert(std::pair<const char*, const char*>("pyc", "applicaiton/x-bytecode.python"));
mime_types.insert(std::pair<const char*, const char*>("qt", "video/quicktime"));
mime_types.insert(std::pair<const char*, const char*>("qtif", "image/x-quicktime"));
mime_types.insert(std::pair<const char*, const char*>("ra", "audio/x-pn-realaudio"));
mime_types.insert(std::pair<const char*, const char*>("ra", "audio/x-pn-realaudio-plugin"));
mime_types.insert(std::pair<const char*, const char*>("ra", "audio/x-realaudio"));
mime_types.insert(std::pair<const char*, const char*>("ram", "audio/x-pn-realaudio"));
mime_types.insert(std::pair<const char*, const char*>("rm", "application/vnd.rn-realmedia"));
mime_types.insert(std::pair<const char*, const char*>("rm", "audio/x-pn-realaudio"));
mime_types.insert(std::pair<const char*, const char*>("rpm", "audio/x-pn-realaudio-plugin"));
mime_types.insert(std::pair<const char*, const char*>("rtf", "application/rtf"));
mime_types.insert(std::pair<const char*, const char*>("rtf", "application/x-rtf"));
mime_types.insert(std::pair<const char*, const char*>("rtf", "text/richtext"));
mime_types.insert(std::pair<const char*, const char*>("rtx", "application/rtf"));
mime_types.insert(std::pair<const char*, const char*>("rtx", "text/richtext"));
mime_types.insert(std::pair<const char*, const char*>("rv", "video/vnd.rn-realvideo"));
mime_types.insert(std::pair<const char*, const char*>("sgml", "text/sgml"));
mime_types.insert(std::pair<const char*, const char*>("sgml", "text/x-sgml"));
mime_types.insert(std::pair<const char*, const char*>("sh", "application/x-bsh"));
mime_types.insert(std::pair<const char*, const char*>("sh", "application/x-sh"));
mime_types.insert(std::pair<const char*, const char*>("sh", "application/x-shar"));
mime_types.insert(std::pair<const char*, const char*>("sh", "text/x-script.sh"));
mime_types.insert(std::pair<const char*, const char*>("shtml", "text/html"));
mime_types.insert(std::pair<const char*, const char*>("shtml", "text/x-server-parsed-html"));
mime_types.insert(std::pair<const char*, const char*>("ssi", "text/x-server-parsed-html"));
mime_types.insert(std::pair<const char*, const char*>("tar", "application/x-tar"));
mime_types.insert(std::pair<const char*, const char*>("tcl", "application/x-tcl"));
mime_types.insert(std::pair<const char*, const char*>("tcl", "text/x-script.tcl"));
mime_types.insert(std::pair<const char*, const char*>("text", "application/plain"));
mime_types.insert(std::pair<const char*, const char*>("text", "text/plain"));
mime_types.insert(std::pair<const char*, const char*>("tgz", "application/gnutar"));
mime_types.insert(std::pair<const char*, const char*>("tgz", "application/x-compressed"));
mime_types.insert(std::pair<const char*, const char*>("tif", "image/tiff"));
mime_types.insert(std::pair<const char*, const char*>("tif", "image/x-tiff"));
mime_types.insert(std::pair<const char*, const char*>("tiff", "image/tiff"));
mime_types.insert(std::pair<const char*, const char*>("tiff", "image/x-tiff"));
mime_types.insert(std::pair<const char*, const char*>("txt", "text/plain"));
mime_types.insert(std::pair<const char*, const char*>("uri", "text/uri-list"));
mime_types.insert(std::pair<const char*, const char*>("vcd", "application/x-cdlink"));
mime_types.insert(std::pair<const char*, const char*>("vmd", "application/vocaltec-media-desc"));
mime_types.insert(std::pair<const char*, const char*>("vrml", "application/x-vrml"));
mime_types.insert(std::pair<const char*, const char*>("vrml", "model/vrml"));
mime_types.insert(std::pair<const char*, const char*>("vrml", "x-world/x-vrml"));
mime_types.insert(std::pair<const char*, const char*>("vsd", "application/x-visio"));
mime_types.insert(std::pair<const char*, const char*>("vst", "application/x-visio"));
mime_types.insert(std::pair<const char*, const char*>("vsw", "application/x-visio"));
mime_types.insert(std::pair<const char*, const char*>("wav", "audio/wav"));
mime_types.insert(std::pair<const char*, const char*>("wav", "audio/x-wav"));
mime_types.insert(std::pair<const char*, const char*>("wmf", "windows/metafile"));
mime_types.insert(std::pair<const char*, const char*>("xla", "application/excel"));
mime_types.insert(std::pair<const char*, const char*>("xla", "application/x-excel"));
mime_types.insert(std::pair<const char*, const char*>("xla", "application/x-msexcel"));
mime_types.insert(std::pair<const char*, const char*>("xlb", "application/excel"));
mime_types.insert(std::pair<const char*, const char*>("xlb", "application/vnd.ms-excel"));
mime_types.insert(std::pair<const char*, const char*>("xlb", "application/x-excel"));
mime_types.insert(std::pair<const char*, const char*>("xlc", "application/excel"));
mime_types.insert(std::pair<const char*, const char*>("xlc", "application/vnd.ms-excel"));
mime_types.insert(std::pair<const char*, const char*>("xlc", "application/x-excel"));
mime_types.insert(std::pair<const char*, const char*>("xld", "application/excel"));
mime_types.insert(std::pair<const char*, const char*>("xld", "application/x-excel"));
mime_types.insert(std::pair<const char*, const char*>("xlk", "application/excel"));
mime_types.insert(std::pair<const char*, const char*>("xlk", "application/x-excel"));
mime_types.insert(std::pair<const char*, const char*>("xll", "application/excel"));
mime_types.insert(std::pair<const char*, const char*>("xll", "application/vnd.ms-excel"));
mime_types.insert(std::pair<const char*, const char*>("xll", "application/x-excel"));
mime_types.insert(std::pair<const char*, const char*>("xlm", "application/excel"));
mime_types.insert(std::pair<const char*, const char*>("xlm", "application/vnd.ms-excel"));
mime_types.insert(std::pair<const char*, const char*>("xlm", "application/x-excel"));
mime_types.insert(std::pair<const char*, const char*>("xls", "application/excel"));
mime_types.insert(std::pair<const char*, const char*>("xls", "application/vnd.ms-excel"));
mime_types.insert(std::pair<const char*, const char*>("xls", "application/x-excel"));
mime_types.insert(std::pair<const char*, const char*>("xls", "application/x-msexcel"));
mime_types.insert(std::pair<const char*, const char*>("xlt", "application/excel"));
mime_types.insert(std::pair<const char*, const char*>("xlt", "application/x-excel"));
mime_types.insert(std::pair<const char*, const char*>("xlv", "application/excel"));
mime_types.insert(std::pair<const char*, const char*>("xlv", "application/x-excel"));
mime_types.insert(std::pair<const char*, const char*>("xlw", "application/excel"));
mime_types.insert(std::pair<const char*, const char*>("xlw", "application/vnd.ms-excel"));
mime_types.insert(std::pair<const char*, const char*>("xlw", "application/x-excel"));
mime_types.insert(std::pair<const char*, const char*>("xlw", "application/x-msexcel"));
mime_types.insert(std::pair<const char*, const char*>("xm", "audio/xm"));
mime_types.insert(std::pair<const char*, const char*>("xml", "application/xml"));
mime_types.insert(std::pair<const char*, const char*>("xml", "text/xml"));
mime_types.insert(std::pair<const char*, const char*>("z", "application/x-compress"));
mime_types.insert(std::pair<const char*, const char*>("z", "application/x-compressed"));
mime_types.insert(std::pair<const char*, const char*>("zip", "application/x-compressed"));
mime_types.insert(std::pair<const char*, const char*>("zip", "application/x-zip-compressed"));
mime_types.insert(std::pair<const char*, const char*>("zip", "application/zip"));
mime_types.insert(std::pair<const char*, const char*>("zip", "multipart/x-zip"));